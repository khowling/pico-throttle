from machine import Pin
import utime

#  GP25 = on-board LED, set as a output
led_onboard = Pin(25, Pin.OUT)
led_onboard.value(0)

# GP14 - set as a input
speed_sensor = Pin(14, Pin.IN, Pin.PULL_UP)
motor = Pin(17, Pin.OUT)

last_sensor_close = utime.ticks_ms()
last_sensor_open = utime.ticks_ms()


# ( 2.18 meters : circumference of a 27.5" x 2.25" wheel )
KM_PER_REVOLUTION = 2.18 / 1000
MS_IN_AN_HOUR = 3600000
MAX_SPEED_KMH = 12
MAX_SPEED_DURATION = int(
    MS_IN_AN_HOUR / (MAX_SPEED_KMH / KM_PER_REVOLUTION))  # ( 20 km/h)

print("MAX_SPEED_KMH=", MAX_SPEED_KMH,
      " MAX_SPEED_DURATION=", MAX_SPEED_DURATION)


def sensor_handler(sensor):
    global last_sensor_close
    global last_sensor_open
    # debounce (only trigger once in a 100mS period)

    irq_trigger_time = utime.ticks_ms()
    sensor_val = sensor.value()
    last_sensor_open_diff = utime.ticks_diff(
        irq_trigger_time, last_sensor_open)
    last_sensor_close_diff = utime.ticks_diff(
        irq_trigger_time, last_sensor_close)
    print(sensor_val, "(0=close, 1=open) ", irq_trigger_time, ": last_sensor_open_diff=",
          last_sensor_open_diff, " last_sensor_close_diff=", last_sensor_close_diff)

    if (sensor_val == 0):  # CLOSE

        if (last_sensor_close_diff >= last_sensor_open_diff):
            # Got a high edge, ignore all high edges for the next 80mS
            if (last_sensor_close_diff > 80):
                # last high <350mS ago, need to throttle
                if (last_sensor_close_diff < MAX_SPEED_DURATION):
                    throttle = True
                    # artifical sleep (will cause future interupts to queue, and should be rejected as debounce)
                    throttle_by_ms = MAX_SPEED_DURATION - last_sensor_close_diff
                    utime.sleep_ms(throttle_by_ms)
                    last_sensor_close_diff = last_sensor_close_diff + throttle_by_ms
                else:
                    throttle = False

                revolutions_per_hour = MS_IN_AN_HOUR/last_sensor_close_diff
                print(sensor_val, "(0=close, 1=open) ", irq_trigger_time, ": Speed=", KM_PER_REVOLUTION *
                      revolutions_per_hour, "kph (throttle=", throttle, ") (last_sensor_close_diff=", last_sensor_close_diff, ")")

            else:
                print(sensor_val, "(0=close, 1=open) ", irq_trigger_time,
                      ": Bounce diff=", last_sensor_close_diff)
                #last_sensor_close = irq_trigger_time

            print(sensor_val, "(0=close, 1=open) ",
                  irq_trigger_time, ": Set(1)")
            led_onboard.value(1)
            motor.value(1)
            last_sensor_close = utime.ticks_ms()
        else:
            print(sensor_val, "(0=close, 1=open) ",
                  irq_trigger_time, ": Already closed ")

    else:  # OPEN

        # Got a high edge, ignore all high edges for the next 80mS
        if (last_sensor_open_diff >= last_sensor_close_diff):
            if (last_sensor_open_diff > 80):

                # ensure on for at least 10ms when throttled
                if (last_sensor_close_diff < 10):
                    print(sensor_val, "(0=close, 1=open) ", irq_trigger_time,
                          ": sleeping for ", 10 - last_sensor_close_diff)
                    utime.sleep_ms(10 - last_sensor_close_diff)

            else:
                print(sensor_val, "(0=close, 1=open) ", irq_trigger_time, ": Bounce open diff=",
                      last_sensor_open_diff, " (last_sensor_open_diff=", last_sensor_open_diff, ")")

            print(sensor_val, "(0=close, 1=open) ", irq_trigger_time, ": Set(0),  last_sensor_close_diff=",
                  last_sensor_close_diff, " last_sensor_open_diff=", last_sensor_open_diff, ")")
            led_onboard.value(0)
            motor.value(0)
            last_sensor_open = utime.ticks_ms()

        else:
            print(sensor_val, "(0=close, 1=open) ",
                  irq_trigger_time, ": Already open")


speed_sensor.irq(trigger=Pin.IRQ_RISING |
                 Pin.IRQ_FALLING, handler=sensor_handler)
